<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/06/16/promise-axios/"/>
      <url>/2022/06/16/promise-axios/</url>
      
        <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><p>定义：异步的js和xml</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul><li>无刷新获取数据</li><li>根据用户事件来更新部分页面内容</li></ul><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>无浏览历史，不能回退</li><li>存在跨域问题</li><li>SEO不友好（爬虫）</li></ul><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>可标记语言：传输和存储数据。<br>HTML：网页中<strong>呈现</strong>数据。<br>xml现在已经被json替代了</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p><strong>浏览器和万维网服务器之间相互通信的规则。</strong><br>webservice,rest架构离不开对http协议的认识<br>:one:webservice &#x3D; http + xml<br>:two:rest &#x3D; http + json<br><strong>协议</strong>：多方都遵守共同的一个规范。</p><h3 id="HTTP的工作流程"><a href="#HTTP的工作流程" class="headerlink" title="HTTP的工作流程"></a>HTTP的工作流程</h3><ul><li>0.原始状态：client ,server没有关系</li><li>1.建立连接，发送请求</li><li>2.沿着连接，返回响应信息</li><li>3.响应后，又断开连接，没有关系</li></ul><h3 id="HTTP请求信息和响应信息格式"><a href="#HTTP请求信息和响应信息格式" class="headerlink" title="HTTP请求信息和响应信息格式"></a>HTTP请求信息和响应信息格式</h3><p>浏览器可以发送http协议，但不只是浏览器发送http协议</p><h3 id="请求报文："><a href="#请求报文：" class="headerlink" title="请求报文："></a>请求报文：</h3><p>:one:请求行:two:请求头信息:three:请求体</p><ul><li>请求行：:one:请求方式 :two:请求路径url :three:所用的协议<ul><li>请求方式：get | post | put | delete | trace…</li></ul></li><li>请求头： <ul><li>Host:<a href="http://www.baidu.com/">www.baidu.com</a></li><li>Cookie: BAIDUID&#x3D;XXXXXXXXXX;BAIDUSID&#x3D;XXXX;（sid：sessionID）</li><li>Content-Type: application&#x2F;x-www-from-urlencoded | applicaton&#x2F;json</li></ul></li><li>请求体： :one: username&#x3D;tom&amp;pwd&#x3D;123 :two: {“username:,”tom”,”pwd”:123} &#x3D;&gt;(application&#x2F;json的格式)</li></ul><h3 id="响应报文："><a href="#响应报文：" class="headerlink" title="响应报文："></a>响应报文：</h3><ul><li>响应行：:one:协议版本 :two:状态码 :three:状态文本<ul><li>status: <ul><li>200:请求成功 </li><li>404: not found 无法找到请求资源</li><li>201：已创建</li><li>401：未授权</li><li>500：服务器内部错误</li></ul></li></ul></li><li>响应头信息：key : value<ul><li>Content-Type”: text&#x2F;html ;charset&#x3D;utf-8</li><li>Set-Cookie:BD_CK_SAM&#x3D;1;path&#x3D;&#x2F;</li></ul></li><li>响应体：html内容 | json文本 | js&#x2F;css |图片</li></ul><h3 id="发ajax请求"><a href="#发ajax请求" class="headerlink" title="发ajax请求"></a>发ajax请求</h3><pre class=" language-js"><code class="language-js">btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建对象</span>    <span class="token keyword">const</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 初始化 设置请求方式和URL</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span><span class="token string">'http://127.0.0.1:8000/server'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 发请求</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 事件绑定</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readystate <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>es6进行异步编程的新解决方案，es5是回调函数。</p><h3 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h3><ul><li>指定回调函数的方式更加灵活（给promise对象绑定回调函数）</li><li>支持链式调用，可解决回调地狱问题<br>resove | reject 都是函数类型的数据。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将promise状态设为 成功</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将promise状态设为 失败</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'成功的回调'</span><span class="token operator">+</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'失败的回调'</span><span class="token operator">+</span>reason<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="util-promisify方法"><a href="#util-promisify方法" class="headerlink" title="util.promisify方法"></a>util.promisify方法</h2><p>转成错误优先的promise风格的方法。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> mineReadFile <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token function">mineReadFile</span><span class="token punctuation">(</span><span class="token string">'./test.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="promise的状态"><a href="#promise的状态" class="headerlink" title="promise的状态"></a>promise的状态</h2><p>实例对象中的一个属性 【promiseState】</p><ul><li>pending 未决定的</li><li>resolved | fullfilled 成功</li><li>rejected 失败</li></ul><p>结果只能由pending变成成功 | 失败，且只能改变一次。</p><h2 id="promise对象的值"><a href="#promise对象的值" class="headerlink" title="promise对象的值"></a>promise对象的值</h2><p>实例对象中的另一个属性 【promiseResult】<br>保存对象异步任务【成功 | 失败】结果</p><ul><li>resolve()</li><li>reject()</li></ul><h2 id="promise工作流程"><a href="#promise工作流程" class="headerlink" title="promise工作流程"></a>promise工作流程</h2><img src="./media/promise工作流程.png"><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>promise构造函数： promise(excutor) {}</p><ul><li>excutor函数： 执行器，(resolve,reject) &#x3D;&gt; {} ,它是在new Promise时，就同步执行的。</li></ul><h3 id="promise-resolve方法"><a href="#promise-resolve方法" class="headerlink" title="promise.resolve方法"></a>promise.resolve方法</h3><pre class=" language-js"><code class="language-js">       <span class="token comment" spellcheck="true">// 如果传入参数为非promise类型对象，返回结果为成功的promise对象</span>        <span class="token comment" spellcheck="true">// 如果传入的参数是promise类型对象，结果取决于 promise对象的结果</span>    <span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// resolve('ok')</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="promise-reject方法"><a href="#promise-reject方法" class="headerlink" title="promise.reject方法"></a>promise.reject方法</h3><p>无论传入什么，返回一个失败的promise对象</p><h3 id="promise-all方法"><a href="#promise-all方法" class="headerlink" title="promise.all方法"></a>promise.all方法</h3><p>(promises) &#x3D;&gt; {},promises包含n个promise的数组<br>它返回一个新的promise，只有所有promise都成功才成功，有一个失败就直接失败。</p><pre class=" language-js"><code class="language-js">    <span class="token keyword">let</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// resolve('ok')</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// promise.all</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// res的PromiseState是promise.all返回的状态，有一个失败就rejected</span></code></pre><h3 id="promise-race方法"><a href="#promise-race方法" class="headerlink" title="promise.race方法"></a>promise.race方法</h3><p>(promises) &#x3D;&gt; {},promises包含n个promise的数组<br>它返回一个新的promise，结果是数组中先第一个返回promise的结果，就是新promise结果</p><h3 id="promise改变状态的方式"><a href="#promise改变状态的方式" class="headerlink" title="promise改变状态的方式"></a>promise改变状态的方式</h3><ul><li>resolve(): pending &#x3D;&gt; fulfilled</li><li>reject(): pending &#x3D;&gt; rejected</li><li>throw: pending &#x3D;&gt; rejected</li></ul><h3 id="能否执行promise的多个回调（then后面的函数）"><a href="#能否执行promise的多个回调（then后面的函数）" class="headerlink" title="能否执行promise的多个回调（then后面的函数）"></a>能否执行promise的多个回调（then后面的函数）</h3><p>当promise改变对应状态时它的对应多个回调都会执行</p><h3 id="改变状态与定义回调的顺序"><a href="#改变状态与定义回调的顺序" class="headerlink" title="改变状态与定义回调的顺序"></a>改变状态与定义回调的顺序</h3><p>指定是定义，回调函数的执行要等到状态改变后才执行。</p><ul><li>如果promise中没有异步任务时，是先改变状态后定义回调</li><li>如果promise中有异步任务时，是先指定回调，再改变状态</li></ul><h3 id="then方法返回结果由什么决定"><a href="#then方法返回结果由什么决定" class="headerlink" title="then方法返回结果由什么决定"></a>then方法返回结果由什么决定</h3><pre class=" language-js"><code class="language-js"> <span class="token keyword">let</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// resolve('ok')</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> p2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token string">'出错了'</span>            <span class="token comment" spellcheck="true">// reject('error')</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Promise &amp;#123;&lt;pending>&amp;#125;[[Prototype]]: Promise[[PromiseState]]: "rejected"[[PromiseResult]]: "出错了"</span>    <span class="token comment" spellcheck="true">// result返回是一个promise，它的状态由then方法对应函数执行结果来决定then的结果</span></code></pre><h3 id="promise的then的链式调用"><a href="#promise的then的链式调用" class="headerlink" title="promise的then的链式调用"></a>promise的then的链式调用</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    pp<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 111 'ok'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这个.then是上面then的状态结果 成功 undefined</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 222 undefined</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h3 id="promise异常穿透"><a href="#promise异常穿透" class="headerlink" title="promise异常穿透"></a>promise异常穿透</h3><p>最后的catch来对失败进行处理</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">let</span> pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// resolve('ok')</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    pp<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token string">'失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h3 id="中断promise链"><a href="#中断promise链" class="headerlink" title="中断promise链"></a>中断promise链</h3><p>有且只有一种方法<br>返回一个pending状态的promise，我们知道只有promise状态改变才执行回调，返回一个pending的话，表示状态没改变就不会执行回调</p><pre class=" language-js"><code class="language-js"> <span class="token keyword">let</span> pp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// resolve('ok')</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    pp<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回一个pending状态的promise</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token string">'失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="自定义（手写）promise"><a href="#自定义（手写）promise" class="headerlink" title="自定义（手写）promise"></a>自定义（手写）promise</h2><h3 id="梳理"><a href="#梳理" class="headerlink" title="梳理"></a>梳理</h3><ul><li>定义构造函数 | 类，要有excutor执行器</li><li>执行器里面要有resolve &amp; reject函数，来修改实例的promiseState和promiseResult</li><li>throw 也能修改实例的状态和值，用try-catch来调用resolve | reject</li><li>状态只能修改一次，从pending &#x3D;&gt; fulfilled | reject,(改变状态前判断是不是[pending])</li><li>为实例添加then方法来执行回调（根据promiseState状态来做选择）</li><li>执行器异步任务的实现，在then方法中保存回调函数，在状态改变时才执行</li><li>then方法指定多个回调，用数据每次push</li><li>同步任务-返回结果：1.返回非promise数据——成功的promise对象，2.返回promise对象，根据里面是状态来决定是成功 | 失败promise。（result instanceof Promise来判断）。如果是promise可以调用then方法，3.throw异常用try-catch</li><li>异步任务——返回结果：在pending时保存回调函数时要有执行回调的函数。函数内容和同步任务的一样</li><li>then方法完善：把同步异步任务的回调封装成函数。</li><li>异常穿透：添加catch方法，然后返回调用then方法，then中可以不传递参数（typeof xx !&#x3D; ‘function’），所以你在指定回调时，创建默认的回调</li><li>Promise.resolve封装：返回一个promise对象。 1.如果传入参数为非promise类型对象，返回结果为成功的promise对象，2. 如果传入的参数是promise类型对象，结果取决于 promise对象的结果</li><li>Promise.reject封装：始终返回一个失败的promise对象</li><li>Promise.all封装：promises数组中全部状态为成功才成功 否则失败</li><li>Promise.race封装：它返回一个新的promise，结果是数组中先第一个返回promise的结果，就是新promise结果</li><li>Promise.then方法回调异步执行：要等同步代码执行完才执行回调，在调用回调的地方加定时器。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>excutor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行器函数同步调用——要接收传递的参数</span>        <span class="token comment" spellcheck="true">// 问题： resolve ,reject没定义， 用resolve(),说明是函数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> <span class="token string">'pending'</span> <span class="token comment" spellcheck="true">//状态只能修改一次</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// 保存回调,then可以链式调用</span>        <span class="token comment" spellcheck="true">// this.callback = &amp;#123;&amp;#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 成功状态</span>        <span class="token comment" spellcheck="true">// 这里直接调用，this=>window</span>        <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 确保状态只能修改一次</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>PromiseState <span class="token operator">!==</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token keyword">return</span>            <span class="token comment" spellcheck="true">// 1.修改对象状态 promiseState</span>            that<span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> <span class="token string">'fulfilled'</span>            <span class="token comment" spellcheck="true">// 2.设置对象结果 promiseResult</span>            that<span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> data            <span class="token comment" spellcheck="true">// 如果是异步时,要等状态改变才执行回调</span>            <span class="token comment" spellcheck="true">// if(that.callback.onResolved) that.callback.onResolved(data)</span>            that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 定时器解决then时里面是异步任务</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    item<span class="token punctuation">.</span><span class="token function">onResolved</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 失败状态</span>        <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 确保状态只能修改一次</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>that<span class="token punctuation">.</span>PromiseState <span class="token operator">!==</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token keyword">return</span>            <span class="token comment" spellcheck="true">// 1.修改对象状态 promiseState</span>            that<span class="token punctuation">.</span>PromiseState <span class="token operator">=</span> <span class="token string">'rejected'</span>            <span class="token comment" spellcheck="true">// 2.设置对象结果 promiseResult</span>            that<span class="token punctuation">.</span>PromiseResult <span class="token operator">=</span> data            <span class="token comment" spellcheck="true">// 如果是异步时,要等状态改变才执行回调</span>            <span class="token comment" spellcheck="true">//  if(that.callback.onRejected) that.callback.onRejected(data)</span>            that<span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 定时器解决then时里面是异步任务</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    item<span class="token punctuation">.</span><span class="token function">onRejected</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">excutor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// throw改变状态的修改</span>            <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加then方法</span>    <span class="token comment" spellcheck="true">// 当promise改变对应状态时它的对应多个回调都会执行</span>    <span class="token function">then</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// 实现异常穿透</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onRejected <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            onRejected <span class="token operator">=</span> reason <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> reason            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onResolved <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            onResolved <span class="token operator">=</span> value <span class="token operator">=</span><span class="token operator">></span> value        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用回调函数</span>        <span class="token comment" spellcheck="true">// 同步修改then方法的返回</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 封装函数</span>            <span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">type</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>PromiseResult<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// result是不是promise实例对象</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 不是 结果的对象直接为 成功</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> <span class="token string">'fulfilled'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 定时器解决then时里面是异步任务</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">callback</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> <span class="token string">'rejected'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 定时器解决then时里面是异步任务</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">callback</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当状态没改变时，我们要保存回调</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PromiseState <span class="token operator">===</span> <span class="token string">'pending'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 异步的修改then状态值</span>                    onResolved<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 执行成功的回调</span>                        <span class="token function">callback</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">)</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                    onRejected<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 失败的回调</span>                        <span class="token function">callback</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加catch方法</span>    <span class="token comment" spellcheck="true">// 最后的catch来对失败进行处理</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">onRejected</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// catch功能和then一样，只是没有onResolved</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加resolve方法</span>    <span class="token comment" spellcheck="true">// 如果传入参数为非promise类型对象，返回结果为成功的promise对象</span>    <span class="token comment" spellcheck="true">// 如果传入的参数是promise类型对象，结果取决于 promise对象的结果</span>    <span class="token keyword">static</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// static xx === Promise.xxx</span>    <span class="token comment" spellcheck="true">// 添加reject方法</span>    <span class="token comment" spellcheck="true">// 始终返回一个失败的promise对象</span>    <span class="token keyword">static</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加 all方法</span>    <span class="token comment" spellcheck="true">// promises数组中全部状态为成功才成功 否则失败</span>    <span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 对象状态为成功</span>                    <span class="token comment" spellcheck="true">// 要求每个pormise状态成功才返回成功的promise</span>                    count<span class="token operator">++</span>                    <span class="token comment" spellcheck="true">// 保证每个promise位置和传过来的位置一样，哪怕异步后执行</span>                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res                    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 成功状态</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加race方法</span>    <span class="token comment" spellcheck="true">// 它返回一个新的promise，结果是数组中先第一个返回promise的结果，就是新promise结果</span>    <span class="token keyword">static</span> <span class="token function">race</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                promises<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 返回一个promise对象</span><span class="token comment" spellcheck="true">// 如果是非promise返回成功的promise对象</span><span class="token comment" spellcheck="true">// 如果是promise根据它是状态来返回成功 | 失败的promise对象</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// throw 'oh no'</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// resolve('ok')</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="await表达式"><a href="#await表达式" class="headerlink" title="await表达式"></a>await表达式</h2><ul><li>await右侧可以是promise对象，也可以是其它值</li><li>如果是promise对象，await返回promise成功的值</li><li>如果是其它值，将此值作为await返回值<br><strong>await必须写在async中，但是async可以没有await</strong><pre class=" language-js"><code class="language-js"> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// throw 'oh no'</span>  <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// resolve('ok')</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><h1 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h1><h2 id="请求报文：-1"><a href="#请求报文：-1" class="headerlink" title="请求报文："></a>请求报文：</h2><p>:one:请求行:two:请求头信息:three:请求体</p><ul><li>请求行：:one:请求方式 :two:请求路径url :three:所用的协议<ul><li>请求方式：get | post | put | delete | trace…</li></ul></li><li>请求头： <ul><li>Host:<a href="http://www.baidu.com/">www.baidu.com</a></li><li>Cookie: BAIDUID&#x3D;XXXXXXXXXX;BAIDUSID&#x3D;XXXX;（sid：sessionID）</li><li>Content-Type: application&#x2F;x-www-from-urlencoded | applicaton&#x2F;json</li></ul></li><li>请求体： :one: username&#x3D;tom&amp;pwd&#x3D;123 :two: {“username:,”tom”,”pwd”:123} &#x3D;&gt;(application&#x2F;json的格式)</li></ul><h2 id="响应报文：-1"><a href="#响应报文：-1" class="headerlink" title="响应报文："></a>响应报文：</h2><ul><li>响应行：:one:协议版本 :two:状态码 :three:状态文本<ul><li>status: <ul><li>200:请求成功 </li><li>404: not found 无法找到请求资源</li><li>201：已创建</li><li>401：未授权</li><li>500：服务器内部错误</li></ul></li></ul></li><li>响应头信息：key : value<ul><li>Content-Type”: text&#x2F;html ;charset&#x3D;utf-8</li><li>Set-Cookie:BD_CK_SAM&#x3D;1;path&#x3D;&#x2F;</li></ul></li><li>响应体：html内容 | json文本 | js&#x2F;css |图片</li></ul><h2 id="不同类型的请求及作用"><a href="#不同类型的请求及作用" class="headerlink" title="不同类型的请求及作用"></a>不同类型的请求及作用</h2><ul><li>get: 从服务器读数据</li><li>post: 向服务器添加数据</li><li>put: 更新服务器数据</li><li>delete: 删除服务器数据</li></ul><h2 id="API分类"><a href="#API分类" class="headerlink" title="API分类"></a>API分类</h2><ul><li><p>restful:rest API</p><ul><li>发送请求进行CRUD由请求方式来决定</li><li>同一个请求路径可以进行多种操作</li><li>请求方式： GET | POST | PUT | DELETE</li></ul></li><li><p>restless: 非rest API</p><ul><li>请求方式不决定请求的CRUD请求</li><li>一个请求路径只对应一个操作</li><li>一般只有GET | POST</li></ul></li></ul><h3 id="json-server-restful"><a href="#json-server-restful" class="headerlink" title="json-server(restful)"></a>json-server(restful)</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// install</span>npm i ig json<span class="token operator">-</span>server<span class="token comment" spellcheck="true">// create a db.json with some data (项目根目录)</span><span class="token comment" spellcheck="true">// start</span>json<span class="token operator">-</span>server <span class="token operator">--</span>watch db<span class="token punctuation">.</span>json</code></pre><ul><li>query: &#x2F;posts?id&#x3D;1(过滤处理)</li><li>params: &#x2F;posts&#x2F;1 直接定位</li></ul><h2 id="区别一般http和ajax请求"><a href="#区别一般http和ajax请求" class="headerlink" title="区别一般http和ajax请求"></a>区别一般http和ajax请求</h2><ul><li>ajxa一种特别的http请求</li><li>服务器来说没区别，区别在浏览器端</li><li>ajax请求只有xhr和fetch，其它是非ajax请求</li><li>ajax引擎，一种内置代码，浏览器派发ajax引擎发ajax请求</li><li>一般请求：浏览器直接显示，刷新|跳转 </li><li>ajax请求：浏览器不会更新操作，需要我们来修改数据</li></ul><h2 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h2><ul><li>onerror : 网络错误的监听</li><li>open() :初始化请求</li><li>send(): 发请求</li><li>abort(): 中断请求</li><li>….</li></ul><p>配置对象：它的key值|属性名是固定的，不能随便改。<br>send的数据，urlencoded | json</p><h2 id="axios封装"><a href="#axios封装" class="headerlink" title="axios封装"></a>axios封装</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    url<span class="token punctuation">,</span>    method <span class="token operator">=</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    params <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    data <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回一个promise数据</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 把method统一下</span>        method <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">toLocaleUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 处理query参数，要带在url后面        </span>        <span class="token keyword">let</span> queryString <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// let queryString = ''</span>        <span class="token comment" spellcheck="true">// let kv = Object.entries(params).forEach(item => &amp;#123;</span>        <span class="token comment" spellcheck="true">//     queryString += `$&amp;#123;item[0]&amp;#125;=$&amp;#123;item[1]&amp;#125;&amp;`</span>        <span class="token comment" spellcheck="true">// &amp;#125;)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// queryString = queryString.substring(0,queryString.length - 1)</span>            url <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">'?'</span> <span class="token operator">+</span> queryString        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 创建xhr实例对象</span>        <span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 初始化,true为异步</span>        request<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 发请求</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token operator">||</span> method <span class="token operator">===</span> <span class="token string">'DELETE'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token operator">||</span> method <span class="token operator">===</span> <span class="token string">'PUT'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span><span class="token string">'application/json;chartset=utf-8'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 发送json格式请求体参数： 必须加请求头</span>            request<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 请求没有完成</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token keyword">return</span>            <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>status<span class="token punctuation">,</span>statusText<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> request            <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 请求成功，调用 resolve</span>                <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    data<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">,</span>                    status<span class="token punctuation">,</span>                    statusText                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 请求失败，调用 reject</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'request error,status is '</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="axios介绍及特点"><a href="#axios介绍及特点" class="headerlink" title="axios介绍及特点"></a>axios介绍及特点</h2><h3 id="axios是什么"><a href="#axios是什么" class="headerlink" title="axios是什么"></a>axios是什么</h3><ul><li>前端最流行的ajax请求库</li><li>react | vue官方推荐用axios发ajax请求</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>基于promise的异步ajax请求库</li><li>浏览器和node都可以用</li><li>支持请求拦截器|响应拦截器</li><li>支持请求取消</li><li>请求|响应数据转换</li><li>批量发送多个请求（封装的promise.all）</li></ul><p><strong>只有浏览器才有可能发ajax请求，服务器只有http请求</strong></p><h3 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h3><p><strong>语法糖：包装它的简单语法</strong></p><ul><li><p>axios(config): 通用&#x2F;最本质的发任意类型请求的方式</p></li><li><p>axios(url[, config]): 可以只指定url 发get 请求</p></li><li><p>axios.request(config): 等同于axios(config)</p></li><li><p>axios.get(url[, config]): 发get 请求</p></li><li><p>axios.delete(url[, config]): 发delete 请求</p></li><li><p>axios.post(url[, data, config]): 发post 请求</p></li><li><p>axios.put(url[, data, config]): 发put 请求</p></li><li><p>axios.defaults.xxx: 请求的默认全局配置（method\baseURL\params\timeout…）</p></li><li><p>axios.interceptors.request.use(): 添加请求拦截器</p></li><li><p>axios.interceptors.response.use(): 添加响应拦截器</p></li><li><p>axios.create([config]): 创建一个新的axios(它没有下面的功能)</p></li><li><p>axios.Cancel(): 用于创建取消请求的错误对象</p></li><li><p>axios.CancelToken(): 用于创建取消请求的 token 对象</p></li><li><p>axios.isCancel(): 是否是一个取消请求的错误</p></li><li><p>axios.all(promises): 用于批量执行多个异步请求</p></li><li><p>axios.spread(): 用来指定接收所有成功数据的回调函数的方法</p></li></ul><h2 id="axios-create-config"><a href="#axios-create-config" class="headerlink" title="axios.create(config)"></a>axios.create(config)</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    baseURL<span class="token punctuation">:</span> <span class="token string">'http://localhost:3000'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// instance是一个函数</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    url<span class="token punctuation">:</span><span class="token string">'xx'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// instace是对象</span>instance<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/xx'</span><span class="token punctuation">)</span></code></pre><ul><li>1.根据指定配置创建一个新axios，也就是每个新axios都有自己的配置</li><li>2.新的axios只是<strong>没有取消请求和批量发请求</strong>的方法，其它语法都是一致的</li><li>3.设计这个语法原因？<ul><li>需求：项目中有部分接口需要配置与另一部分接口配置不一样（比如baseURL的不同），如何处理？</li><li>解决： 创建新axios，每个都有自己配置，应用到不同的接口请求中</li></ul></li></ul><h2 id="拦截器运行流程"><a href="#拦截器运行流程" class="headerlink" title="拦截器运行流程"></a>拦截器运行流程</h2><ul><li>请求拦截器：发请求前<ul><li>请求拦截器后添加，先执行(类似栈：后进先出)</li></ul></li><li>响应拦截器： 在我发请求回调之前执行<br><strong>相同的处理放在响应拦截器前，不同的处理单独写</strong></li></ul><h2 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h2><ul><li>取消正在发送的当前请求<ul><li><p>Cancel对象只有message，无status</p></li><li><p>Error对象才status和message<br>&#96;&#96;&#96;js<br>let cancel &#x2F;&#x2F; 用于保存取消请求的函数<br>  function getProducts1() {<br>  axios({<br>      url: ‘<a href="http://localhost:4000/products1&#39;">http://localhost:4000/products1&#39;</a>,<br>      cancelToken: new axios.CancelToken(function executor(c) { &#x2F;&#x2F; c是用于取消当前请求的函数<br>          &#x2F;&#x2F; 保存取消函数，用于之后可能需要取消当前请求<br>          cancel &#x3D; c;<br>      })<br>  }).then(<br>      response &#x3D;&gt; {<br>          cancel &#x3D; null<br>          console.log(‘请求1成功了’, response.data)<br>      },<br>      error &#x3D;&gt; {<br>          cancel &#x3D; null<br>          console.log(‘请求1失败了’, error.message, error) &#x2F;&#x2F; 请求1失败了 强制取消请求 Cancel {message: “强制取消请求”}<br>      }<br>  )<br>  }</p><p>  function getProducts2() {<br>  axios({<br>      url: ‘<a href="http://localhost:4000/products2&#39;">http://localhost:4000/products2&#39;</a><br>  }).then(<br>      response &#x3D;&gt; {<br>          console.log(‘请求2成功了’, response.data)<br>      }<br>  )<br>  }</p><p>  function cancelReq() {<br>  &#x2F;&#x2F; alert(‘取消请求’)<br>  &#x2F;&#x2F; 执行取消请求的函数<br>  if (typeof cancel &#x3D;&#x3D;&#x3D; ‘function’) {<br>      cancel(‘强制取消请求’)<br>  } else {<br>      console.log(‘没有可取消的请求’)<br>  }<br>  }</p></li></ul></li></ul><pre><code>* 当进行重复发请求时，应该先取消前一个请求，再继续发请求，就是发请求前判断cancel是不是null，不是null话，就要取消请求,取消请求就会进行error回调，判断error是不是axios.Cancel对象，如果是Cancel对象就不能设cancel = null 因为上一次请求异步执行会把下一次请求cancel它是同步执行，会把下一次的cancel设置为null，就不能取消后面请求了， 如果是请求本身失败就把cancel设置为null。* 此部分代码冗余，我们把公共写在请求拦截器里面  ## axios源码分析 ### axios与Axios的关系？ * 1.从语法上来说：axios不是Axios的实例 （axios是函数） * 2.从功能上来说： axios是Axios的实例（可以axios.get()等来使用Axios原型上的方法，但是它也保持函数特性，可以直接函数方式来调用） * 3.axios是Axios.prototype.request函数bind()返回的函数（bind()返回一个request.call(xx)函数,本质axios是调用request方法，只是this发生改变，让axios可以有Axios属性时，像函数一样使用） * 4.axios作为对象有Axios原型对象上的所有方法，有Axios对象上的所有属性 ### instance与axios的区别？instace = axios.create(),axios从语法上不是Axios的实例，从功能上是它的实例，它可以像函数一样使用，但是也有Axios原型的属性方法，并不是通过new xx来的，* 相同：    * 都是一个能发任意请求的函数，request(config)    * 都有发特定请求的各种方法：get() | put() | post()    * 都有默认配置和拦截器的属性：defaults | interceptors* 不同：    * 默认匹配的值可能不一样    * instance没有axios后续添加的方法：create() | CancelToken() | all()### axios支行流程图要发axios请求必须用: axios | instance(axios.create())&lt;img src=&quot;./media/axios支行流程图1.png&quot;&gt;&lt;img src=&quot;./media/axios支行流程图2.png&quot;&gt;&lt;img src=&quot;./media/axios支行流程图3.png&quot;&gt;* 整体流程request(config) =&gt; dispatchRequest(config) =&gt; xhrAdapter(config)&lt;img src=&quot;./media/流程代码思想.png&quot;&gt;请求拦截器unshift,响应拦截器push =&gt;**请求拦截器后添加，先执行*** request流程图```jsexample: requestInterceptors1:(fulfilled1,rejected1)responseInterceptors2:(fulfilled2,rejected2)requestInterceptors11:(fulfilled11,rejected11)responseInterceptors22:(fulfilled22,rejected22)promise链回调： config// 请求拦截器 =&gt; (fulfilled11,rejected11) =&gt; (fulfilled1,rejected1)// 发请求 =&gt; (dispatchRequest,undefined) // 响应拦截器 =&gt; (fulfilled11,rejected11) =&gt; (fulfilled22,rejected22)// axios发请求的回调处理 =&gt; (onResolved, onRejected)</code></pre><img src="./media/拦截器.png"><ul><li><p>request(config)<br>将请求拦截器|dispatchRequest() | 响应拦截器，通过promise串连起来，返回promise</p></li><li><p>dispatchRequest(config)<br>转换请求数据 &#x3D;&gt; 调用xhrAdapter发请求 &#x3D;&gt; 请求返回，转换响应数据,返回promise</p></li><li><p>xhrAdapter(config)<br>创建xhr，根据config进行设置，发送特定请求，并接收响应数据，返回promise，（成功带response,失败带error）</p></li></ul><h3 id="如何取消未完成的请求"><a href="#如何取消未完成的请求" class="headerlink" title="如何取消未完成的请求"></a>如何取消未完成的请求</h3><ul><li>当配置了cancelToken对象时，保存cancel函数<ul><li>创建用于将来中断请求的cancelPromise</li><li>并定义一个用于取消请求的cancel函数</li><li>将cancel函数传递出来</li></ul></li><li>调用cancel取消请求<ul><li>执行cancel函数，传入错误信息message</li><li>内部让cancelPromise变为成功，成功值为Cancel对象</li><li>cancelPromise的成功回调中断请求，并让请求的promise失败，失败的reason为Cacel对象(取消请求时，取消函数返回成功的promise，值是取消的对象，相对于请求的回调返回应该是失败的promise，值是取消的对象)</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github来搭建个人博客</title>
      <link href="/2022/05/14/using-hexo-and-git-to-build-a-personal-blog/"/>
      <url>/2022/05/14/using-hexo-and-git-to-build-a-personal-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h1><ul><li>查看node版本:node -v</li><li>查看npm版本: npm -v<h1 id="安装淘宝的cnpm-管理器"><a href="#安装淘宝的cnpm-管理器" class="headerlink" title="安装淘宝的cnpm 管理器"></a>安装淘宝的cnpm 管理器</h1><pre class=" language-js"><code class="language-js">npm install <span class="token operator">-</span>g cnpm <span class="token operator">--</span>registry<span class="token operator">=</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org</code></pre></li><li>查看cnpm版本:cnpm -v<h1 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h1><pre class=" language-js"><code class="language-js">cnpm install <span class="token operator">-</span>g hexo<span class="token operator">-</span>cli</code></pre></li><li>查看hexo版本:hexo -v</li></ul><h1 id="创建blog目录"><a href="#创建blog目录" class="headerlink" title="创建blog目录"></a>创建blog目录</h1><p>mkdir blog</p><ul><li>进入blog目录:cd blog<h1 id="生成博客-初始化博客"><a href="#生成博客-初始化博客" class="headerlink" title="生成博客 初始化博客"></a>生成博客 初始化博客</h1><code>sudo hexo init </code></li><li>windows是不需要sudo<h1 id="启动本地博客服务"><a href="#启动本地博客服务" class="headerlink" title="启动本地博客服务"></a>启动本地博客服务</h1><code>hexo s</code><h1 id="本地访问地址"><a href="#本地访问地址" class="headerlink" title="本地访问地址"></a>本地访问地址</h1><code>http://localhost:4000/</code><h1 id="创建新的文章"><a href="#创建新的文章" class="headerlink" title="创建新的文章"></a>创建新的文章</h1><code>hexo n &quot;我的第一篇文章&quot;</code><h1 id="返回blog目录"><a href="#返回blog目录" class="headerlink" title="返回blog目录"></a>返回blog目录</h1><code>cd ..</code><h1 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h1><code>hexo c</code><h1 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h1><code>hexo g </code><h1 id="Github创建一个新的仓库"><a href="#Github创建一个新的仓库" class="headerlink" title="Github创建一个新的仓库"></a>Github创建一个新的仓库</h1><pre><code>// 仓库名一定要是你的github的名字，YourGithubName.github.io</code></pre><h1 id="在blog目录下安装git部署插件"><a href="#在blog目录下安装git部署插件" class="headerlink" title="在blog目录下安装git部署插件"></a>在blog目录下安装git部署插件</h1> <code>cnpm install --save hexo-deployer-git</code></li></ul><hr><h1 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h1><ul><li>Deployment<h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></h2><ul><li>deploy:<br>type: git<br>   repo: <a href="https://github.com/study-for-me/study-for-me.github.io.git">https://github.com/study-for-me/study-for-me.github.io.git</a><br>branch: master</li></ul></li></ul><hr><h1 id="部署到Github仓库里"><a href="#部署到Github仓库里" class="headerlink" title="部署到Github仓库里"></a>部署到Github仓库里</h1><p><code>hexo d</code></p><h1 id="访问这个地址可以查看博客"><a href="#访问这个地址可以查看博客" class="headerlink" title="访问这个地址可以查看博客"></a>访问这个地址可以查看博客</h1><p><a href="https://github.com/study-for-me/study-for-me.github.io.git">https://github.com/study-for-me/study-for-me.github.io.git</a> </p><h1 id="下载yilia主题到本地"><a href="#下载yilia主题到本地" class="headerlink" title="下载yilia主题到本地"></a>下载yilia主题到本地</h1><pre class=" language-js"><code class="language-js">git clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>litten<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>yilia<span class="token punctuation">.</span>git themes<span class="token operator">/</span>yilia</code></pre><h1 id="修改hexo根目录下的-config-yml-文件-："><a href="#修改hexo根目录下的-config-yml-文件-：" class="headerlink" title="修改hexo根目录下的 _config.yml 文件 ："></a>修改hexo根目录下的 _config.yml 文件 ：</h1><p><code> theme: yilia</code></p><h1 id="清理一下"><a href="#清理一下" class="headerlink" title="清理一下"></a>清理一下</h1><p><code>hexo c</code></p><h1 id="生成-1"><a href="#生成-1" class="headerlink" title="生成"></a>生成</h1><p><code>hexo g</code></p><h1 id="部署到远程Github仓库"><a href="#部署到远程Github仓库" class="headerlink" title="部署到远程Github仓库"></a>部署到远程Github仓库</h1><p><code>hexo d</code></p><h1 id="查看博客"><a href="#查看博客" class="headerlink" title="查看博客"></a>查看博客</h1><p><code>https://github.com/study-for-me/study-for-me.github.io.git</code></p><h1 id="如是在-hexo-d-出错"><a href="#如是在-hexo-d-出错" class="headerlink" title="如是在 hexo d 出错"></a>如是在 hexo d 出错</h1><p>fatal: unable to access ‘<a href="https://github.com/.../.git&#39;">https://github.com/.../.git&#39;</a>: Could not resolve host: github.com</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//命令行执行</span>git config <span class="token operator">--</span>global <span class="token operator">--</span>unset http<span class="token punctuation">.</span>proxy git config <span class="token operator">--</span>global <span class="token operator">--</span>unset https<span class="token punctuation">.</span>proxy</code></pre><h1 id="我又设置了主题"><a href="#我又设置了主题" class="headerlink" title="我又设置了主题"></a>我又设置了主题</h1><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-2">https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-2</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/14/hello-world/"/>
      <url>/2022/05/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
